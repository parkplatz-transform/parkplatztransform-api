"""

Revision ID: bd22b6a78750
Revises: 
Create Date: 2021-03-05 13:09:59.034967

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "bd22b6a78750"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("modified_at", sa.DateTime(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("permission_level", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "segments",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("modified_at", sa.DateTime(), nullable=False),
        sa.Column("owner_id", postgresql.UUID(), nullable=False),
        sa.Column("further_comments", sa.Text(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="LINESTRING",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_segments_id"), "segments", ["id"], unique=False)
    op.create_table(
        "subsegments_non_parking",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("modified_at", sa.DateTime(), nullable=False),
        sa.Column("order_number", sa.Integer(), nullable=False),
        sa.Column("length_in_meters", sa.Numeric(precision=6, scale=2), nullable=True),
        sa.Column("quality", sa.Integer(), nullable=False),
        sa.Column(
            "no_parking_reasons",
            postgresql.ARRAY(
                sa.Enum(
                    "private_parking",
                    "bus_stop",
                    "bus_lane",
                    "taxi",
                    "tree",
                    "bike_racks",
                    "pedestrian_crossing",
                    "pedestrian_zone",
                    "driveway",
                    "loading_zone",
                    "standing_zone",
                    "emergency_exit",
                    "lowered_curb_side",
                    "no_stopping",
                    "lane",
                    name="noparkingreason",
                )
            ),
            nullable=True,
        ),
        sa.Column("segment_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["segment_id"], ["segments.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_subsegments_non_parking_id"),
        "subsegments_non_parking",
        ["id"],
        unique=False,
    )

    alignment = postgresql.ENUM(
        "parallel", "perpendicular", "diagonal", name="alignment"
    )
    street_location = postgresql.ENUM(
        "street",
        "curb",
        "sidewalk",
        "parking_bay",
        "middle",
        "car_park",
        name="streetlocation",
    )
    user_restrictions = postgresql.ENUM(
        "all_users",
        "handicap",
        "residents",
        "car_sharing",
        "gender",
        "electric_cars",
        "other",
        name="userrestriction",
    )
    alternative_usage_reason = postgresql.ENUM(
        "bus_stop",
        "bus_lane",
        "market",
        "lane",
        "taxi",
        "loading",
        "other",
        name="alternativeusagereason",
    )

    alignment.create(op.get_bind())
    street_location.create(op.get_bind())
    user_restrictions.create(op.get_bind())
    alternative_usage_reason.create(op.get_bind())

    op.create_table(
        "subsegments_parking",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("modified_at", sa.DateTime(), nullable=False),
        sa.Column("order_number", sa.Integer(), nullable=False),
        sa.Column("length_in_meters", sa.Numeric(precision=6, scale=2), nullable=True),
        sa.Column("car_count", sa.Integer(), nullable=True),
        sa.Column("quality", sa.Integer(), nullable=False),
        sa.Column("fee", sa.Boolean(), nullable=True),
        sa.Column("marked", sa.Boolean(), nullable=True),
        sa.Column("time_constraint", sa.Boolean(), nullable=True),
        sa.Column("time_constraint_reason", sa.Text(), nullable=True),
        sa.Column("duration_constraint", sa.Boolean(), nullable=True),
        sa.Column("duration_constraint_reason", sa.Text(), nullable=True),
        sa.Column("segment_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["segment_id"], ["segments.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.add_column('subsegments_parking', sa.Column('alignment', alignment))
    op.add_column('subsegments_parking', sa.Column('street_location', street_location))
    op.add_column('subsegments_parking', sa.Column('user_restrictions', user_restrictions))
    op.add_column('subsegments_parking', sa.Column('alternative_usage_reason', alternative_usage_reason))

    op.create_index(
        op.f("ix_subsegments_parking_id"), "subsegments_parking", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_subsegments_parking_id"), table_name="subsegments_parking")
    op.drop_table("subsegments_parking")
    op.drop_index(
        op.f("ix_subsegments_non_parking_id"), table_name="subsegments_non_parking"
    )
    op.drop_table("subsegments_non_parking")
    op.drop_index(op.f("ix_segments_id"), table_name="segments")
    op.drop_table("segments")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
